#ifndef CAMERA_H
#define CAMERA_H

#include "ray.h"
#include "onb.h"

// The Camera class is used to generate rays for each pixel in the image.
// The rays are generated by sampling a random point on the pixel and then
// mapping the sample to the pixel plane.
struct Camera
{

    QVector3D center, corner, across, up;
    ONB uvw;
    float lens_radius;
    float u0, u1, v0, v1;
    float d;

    Camera() {}
    Camera(const Camera *orig)
    {
        memcpy(this, orig, sizeof(Camera));
    }

    Camera(QVector3D c, QVector3D gaze, QVector3D vup, float aperature, float left,
           float right, float bottom, float top, float distance)
        :center(c), d(distance), u0(left), u1(right), v0(bottom), v1(top)
    {
        lens_radius = aperature / 2.0;
        uvw.initFromWV( -gaze, vup);
        corner = center + u0 * uvw.u() + v0 * uvw.v() - d * uvw.w();
        across = (u1 - u0) * uvw.u();
        up = (v1 - v0) * uvw.v();
    }

    Ray getRay(float a, float b, float xi1, float xi2)
    {
        QVector3D origin = center + 2.0 * (xi1 - 0.5) * lens_radius *
                                      uvw.u() + 2.0 * (xi2 - 0.5) * lens_radius * uvw.v();
        QVector3D target = corner + across * a + up * b;
        return Ray(origin, (target - origin).normalized());
    }
};


#endif // CAMERA_H
